Summary of Our Discussion
You're designing a functional (but not purely functional) systems programming language focused on ergonomics and customization. Your key innovation is using a single api keyword that provides access to compiler internals, allowing users to define their own syntactic forms and language constructs.
Your Core Design:

Minimal keywords (ideally just api)
Standard constructs like if, for, while, match implemented in the core library using api
Very granular API allowing users to create entirely new syntactic forms
Unified system combining preprocessing and compile-time operations
Support for powerful operations like insert_assembly

Key Advantages Identified:

Ultimate customization and extensibility
Bootstrapping elegance (dogfooding your own API)
Single mental model for users
No namespace pollution from reserved words
Evolutionary flexibility without syntax changes

Critical Pitfalls to Solve
1. Compile-time Security

api calls execute during compilation with developer privileges
Risk of malicious libraries performing system operations at compile-time
Need capability restrictions or explicit permission systems

2. Phase Ordering & Dependencies

Determining when different api calls execute (parse-time vs compile-time vs optimization)
Managing dependencies between api calls across compilation phases
Ensuring proper sequencing of transformations

3. Error Handling & Debugging

Making error messages meaningful at user's abstraction level, not just internal api calls
Providing good stack traces through user-defined syntax transformations
Debugging experience when user-defined constructs have bugs

4. Parser Extensibility

How the parser learns about new syntactic forms defined by users
Handling precedence, associativity, and parsing conflicts
Separate compilation with syntax extensions

5. IDE & Tooling Integration

Autocomplete and error checking for user-defined syntax
Static analysis through custom abstractions
Incremental compilation with dynamic api definitions

The Jai precedent suggests your approach is viable, but these implementation challenges will determine whether it's practical and adoptable.